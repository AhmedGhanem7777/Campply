// import React, { useMemo, useState } from "react";
// import { Input } from "@/components/ui/input";
// import { Button } from "@/components/ui/button";
// import { Textarea } from "@/components/ui/textarea";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Checkbox } from "@/components/ui/checkbox";
// import { useToast } from "@/components/ui/use-toast";
// import { api } from "@/lib/api";
// import { ChevronLeft, ChevronRight, CheckCircle2 } from "lucide-react";
// import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";


// const arabCountries = [
//   "ูุตุฑ",
//   "ุงูุณุนูุฏูุฉ",
//   "ุงูุฅูุงุฑุงุช",
//   "ุงููููุช",
//   "ูุทุฑ",
//   "ุงูุจุญุฑูู",
//   "ุนูุงู",
//   "ุงูุฃุฑุฏู",
//   "ุงููุบุฑุจ",
//   "ุงูุฌุฒุงุฆุฑ",
//   "ุชููุณ",
//   // "ูุจูุงู",
//   // "ุณูุฑูุง",
//   // "ููุณุทูู",
//   // "ุงูุนุฑุงู",
//   // "ุงูููู",
//   // "ููุจูุง","ุงูุณูุฏุงู","ููุฑูุชุงููุง",
//   // "ุฌูุจูุชู","ุงูุตููุงู","ุฌุฒุฑ ุงูููุฑ"
// ];

// const countriesList = [
//   { code: "DZ", label: "ุงูุฌุฒุงุฆุฑ" }, { code: "BH", label: "ุงูุจุญุฑูู" }, { code: "KM", label: "ุฌุฒุฑ ุงูููุฑ" },
//   { code: "DJ", label: "ุฌูุจูุชู" }, { code: "EG", label: "ูุตุฑ" }, { code: "IQ", label: "ุงูุนุฑุงู" },
//   { code: "JO", label: "ุงูุฃุฑุฏู" }, { code: "KW", label: "ุงููููุช" }, { code: "LB", label: "ูุจูุงู" },
//   { code: "LY", label: "ููุจูุง" }, { code: "MR", label: "ููุฑูุชุงููุง" }, { code: "MA", label: "ุงููุบุฑุจ" },
//   { code: "OM", label: "ุนูุงู" }, { code: "PS", label: "ููุณุทูู" }, { code: "QA", label: "ูุทุฑ" },
//   { code: "SA", label: "ุงูุณุนูุฏูุฉ" }, { code: "SO", label: "ุงูุตููุงู" }, { code: "SD", label: "ุงูุณูุฏุงู" },
//   { code: "SY", label: "ุณูุฑูุง" }, { code: "TN", label: "ุชููุณ" }, { code: "AE", label: "ุงูุฅูุงุฑุงุช ุงูุนุฑุจูุฉ ุงููุชุญุฏุฉ" },
//   { code: "YE", label: "ุงูููู" },
// ];

// const documentTypes = [
//   { code: "ID", label: "Identity card" },
//   { code: "PASS", label: "Passport" },
//   { code: "DL", label: "Driving license" },
// ];

// const propertyTypes = [
//   "ูุฎููุงุช ุงูุฎูุงู ุงูุชูููุฏูุฉ (Tent Camping)",
//   "(RV / Caravan Camping) ูุฎููุงุช ุงููุฑูุงูุงุช ",
//   "ูุฎููุงุช ุงูุบุงุจุงุช ูุงูุฌุจุงู (Forest / Mountain Camps)",
//   "ุงูุชุฎููู ุงูููุฏูู (Glamorous Camping)",
//   "Safari / Dome / Bubble ุฎูุงู",
//   "ูุฎููุงุช ุจูุฆูุฉ (Eco Camps)",
//   "ูุฎููุงุช ุงููุฒุงุฑุน (Farm Camps)",
//   "ูุฎููุงุช ุงูุดูุงุทุฆ (Beach Camps)",
//   "ูุฎููุงุช ุงูุตุญุฑุงุก (Desert Camps)",
//   "ูุฎููุงุช ุงููุบุงูุฑุงุช (Adventure Camps)",
//   "ูุฎููุงุช ุงูููู ูุงููุฌูู (Astronomy Camps)",
//   "ูุฎููุงุช ุงูููุบุง ูุงูุนุงููุฉ (Wellness Camps)",
// ];

// const bedTypes = [
//   { key: "king", label: "ุณุฑูุฑ ูุฒุฏูุฌ ูุจูุฑ (ูููุบ)" },
//   { key: "queen", label: "ุณุฑูุฑ ูุฒุฏูุฌ (ูููู)" },
//   { key: "double", label: "ุณุฑูุฑ ูุฒุฏูุฌ ุนุงุฏู" },
//   { key: "twin", label: "ุณุฑูุฑ ููุฑุฏ" },
//   { key: "bunk", label: "ุณุฑูุฑ ุจุทุงุจููู" },
//   { key: "sofa", label: "ุณุฑูุฑ ุฃุฑููุฉ" },
//   { key: "crib", label: "ุณุฑูุฑ ุฃุทูุงู" },
//   { key: "air", label: "ุณุฑูุฑ ููุงุฆู / ูุงุจู ููููุฎ" },
// ];

// const basicAmenities = ["WiFi","ุชูููู","ุชุฏูุฆุฉ","ูููุฏ ููุฑุจุงุก","ุฅุถุงุกุฉ"];
// const bathAmenities = ["ุญูุงู ุฎุงุต","ุฏุด ุณุงุฎู","ููุงุดู","ุตุงุจูู","ุดุงูุจู"];
// const kitchenAmenities = ["ูุทุจุฎ ูุฌูุฒ","ุซูุงุฌุฉ","ูููุฏ","ุฃูุงูู ุทุจุฎ","ููุงู ุดุฑุจ"];
// const outdoorAmenities = ["ุดูุงุก","ุฌูุณุฉ ุฎุงุฑุฌูุฉ","ูุฑุงุณู","ุทุงููุฉ","ูุธูุฉ"];
// const facilities = ["ูููู ุณูุงุฑุงุช","ุฃูู","ูุธุงูุฉ","ุงุณุชูุจุงู 24 ุณุงุนุฉ","ุฎุฏูุฉ ุบุฑู"];
// const sharedSpaces = ["ุตุงูุฉ ูุดุชุฑูุฉ","ูุทุจุฎ ูุดุชุฑู","ุญุฏููุฉ","ูุณุจุญ","ููุนุจ"];
// const seclusionOptions = ["ููุนุฒู ุชูุงูุงู","ุดุจู ููุนุฒู","ุจุฌุงูุจ ูุฎููุงุช ุฃุฎุฑู","ูู ููุทูุฉ ุณูุงุญูุฉ"];
// const activities = ["ุฑุญูุงุช ุงุณุชูุดุงููุฉ","ุณูุงุฑู","ุตูุฏ","ุณุจุงุญุฉ","ุชุณูู","ูุฌูู"];
// const terrainOptions = ["ุตุญุฑุงุก","ุฌุจุงู","ุดุงุทุฆ","ูุงุญุฉ","ุบุงุจุฉ","ุณููู"];

// function StepProfile({ data, setData, onOpenPrivacy, onOpenTerms }) {
//   const update = (patch) => setData(d => ({ ...d, profile: { ...d.profile, ...patch } }));
//   return (
//     <div className="space-y-6">
//       {/* <div className="text-lg font-semibold">๐๏ธ ุฃุถู ูุฎูู ุฌุฏูุฏ</div> */}

//       <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
//         <div>
//           <label className="text-sm font-medium">ููุน ุงููุซููุฉ (Document type)*</label>
//           <Select value={data.profile.docType} onValueChange={(v) => update({ docType: v })}>
//             <SelectTrigger><SelectValue placeholder="ุงุฎุชุฑ ููุน ุงููุซููุฉ" /></SelectTrigger>
//             <SelectContent>
//               {documentTypes.map(dt => <SelectItem key={dt.code} value={dt.code}>{dt.label}</SelectItem>)}
//             </SelectContent>
//           </Select>
//         </div>

//         <div>
//           <label className="text-sm font-medium">ุฑูู ุงููุซููุฉ (Document number)*</label>
//           <Input value={data.profile.docNumber} onChange={e => update({ docNumber: e.target.value })} />
//         </div>

//         <div>
//           <label className="text-sm font-medium">ุจูุฏ ุงูุฅุตุฏุงุฑ (Country of issue)*</label>
//           <Select value={data.profile.docCountry} onValueChange={(v) => update({ docCountry: v })}>
//             <SelectTrigger><SelectValue placeholder="ุงุฎุชุฑ ุจูุฏ ุงูุฅุตุฏุงุฑ" /></SelectTrigger>
//             <SelectContent>
//               {countriesList.map(ct => <SelectItem key={ct.code} value={ct.code}>{ct.label}</SelectItem>)}
//             </SelectContent>
//           </Select>
//         </div>
//       </div>

//       <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
//         <div>
//           <label className="text-sm font-medium">ุงูุฏููุฉ (Country)</label>
//           <Select value={data.profile.country} onValueChange={(v) => update({ country: v })}>
//             <SelectTrigger><SelectValue placeholder="ุงุฎุชุฑ ุงูุฏููุฉ" /></SelectTrigger>
//             <SelectContent className="max-h-60 overflow-auto" dir="rtl">
//               {countriesList.map(ct => <SelectItem key={ct.code} value={ct.code}>{ct.label}</SelectItem>)}
//             </SelectContent>
//           </Select>
//         </div>
//         <div>
//           <label className="text-sm font-medium">ุงูุนููุฉ</label>
//           <Input value="USD โ ุงูุฏููุงุฑ ุงูุฃูุฑููู" readOnly />
//         </div>
//       </div>

//       <div className="mt-4">
//         <label className="text-sm font-medium">ููุงุฐุง ุชุฑุบุจ ูู ุงูุฅุฏุฑุงุฌุ (ุงุฎุชูุงุฑู)</label>
//         <Textarea rows={3} value={data.profile.why} onChange={e => update({ why: e.target.value })} placeholder="ุงูุชุจ ุจุฅูุฌุงุฒ ุณุจุจ ุฑุบุจุชู ูู ุงูุฅุฏุฑุงุฌ..." />
//       </div>

//       <div className="flex flex-col gap-2 mt-4">
//         <div className="flex items-center space-x-2 space-x-reverse">
//           <Checkbox id="agree" checked={data.profile.agreeTerms} onCheckedChange={v => update({ agreeTerms: !!v })} />
//           <label htmlFor="agree" className="text-sm cursor-pointer">โ ุฃูุงูู ุนูู ุงูุดุฑูุท ูุงูุฃุญูุงู ูุณูุงุณุฉ ุญูุงูุฉ ุงูุจูุงูุงุช</label>
//         </div>

//         <div className="text-xs text-muted-foreground mt-2">
//           ููููู ุงูุงุทูุงุน ุนูู{" "}
//           <button type="button" onClick={onOpenPrivacy} className="underline hover:text-foreground transition-colors">ุณูุงุณุฉ ุงูุฎุตูุตูุฉ</button>{" "}
//           ู{" "}
//           <button type="button" onClick={onOpenTerms} className="underline hover:text-foreground transition-colors">ุงูุดุฑูุท ูุงูุฃุญูุงู</button>{" "}
//           ุงูุฎุงุตุฉ ุจููุตุฉ ูุงูุจูู ูุจู ุงููุชุงุจุนุฉ.
//         </div>
//       </div>
//     </div>
//   );
// }

// function StepBasics({ data, setData }) {
//   const updateBasics = patch => setData(d => ({ ...d, basics: { ...d.basics, ...patch } }));
//   const updateDesc = patch => setData(d => ({ ...d, description: { ...d.description, ...patch } }));
//   return (
//     <div className="space-y-6">
//       <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
//         <div>
//           <label className="text-sm font-medium">ุงุณู ุงููุฎูู *</label>
//           <Input value={data.basics.name} onChange={e => updateBasics({ name: e.target.value })} placeholder="ูุซุงู: ูุฎูู ุงูุฑูุงู ุงูุฐูุจูุฉ" />
//         </div>
//         <div>
//           <label className="text-sm font-medium">ููุน ุงููุฎูู *</label>
//           <Select value={data.basics.propertyType} onValueChange={v => updateBasics({ propertyType: v })}>
//             <SelectTrigger><SelectValue placeholder="ุงุฎุชุฑ ุงูููุน" /></SelectTrigger>
//             <SelectContent>
//               {propertyTypes.map(t => <SelectItem key={t} value={t}>{t}</SelectItem>)}
//             </SelectContent>
//           </Select>
//         </div>
//         <div className="md:col-span-2">
//           <label className="text-sm font-medium">ุงููููุน ุงูุฅููุชุฑููู (ุงุฎุชูุงุฑู)</label>
//           <Input value={data.basics.website} onChange={e => updateBasics({ website: e.target.value })} placeholder="https://example.com" />
//         </div>
//       </div>

//       <div className="space-y-2">
//         <label className="text-sm font-medium">ูุตู ุงููุฎูู *</label>
//         <Textarea value={data.description.summary} onChange={e => updateDesc({ summary: e.target.value })} rows={4} placeholder="ุงูุชุจ ูุตูุงู ุฌุฐุงุจุงู ููุฎููู..." />
//       </div>

//       <div className="space-y-2">
//         <label className="text-sm font-medium">ุฎุฏูุงุช ุฅุถุงููุฉ ููุถููู</label>
//         <Textarea value={data.description.guestServices} onChange={e => updateDesc({ guestServices: e.target.value })} rows={3} placeholder="ูุซุงู: ุชูุตูู ูู ุงููุทุงุฑุ ุฌููุงุช ุณูุงุญูุฉ..." />
//       </div>
//     </div>
//   );
// }

// function StepLocation({ data, setData }) {
//   const update = patch => setData(d => ({ ...d, location: { ...d.location, ...patch } }));

//   return (
//     <div className="space-y-4">
//       <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
//         <div>
//           <label className="text-sm font-medium">ุงูุฏููุฉ (Country)*</label>
//           <Select value={data.location.country} onValueChange={v => update({ country: v })}>
//             <SelectTrigger className="w-full justify-between flex-row-reverse">
//               <div className="flex-1 text-right truncate">
//                 <SelectValue placeholder="ุงุฎุชุฑ ุงูุฏููุฉ" />
//               </div>
//             </SelectTrigger>
//             <SelectContent className="max-h-60 overflow-auto" dir="rtl">
//               {arabCountries.map(country => (
//                 <SelectItem key={country} value={country}>
//                   {country}
//                 </SelectItem>
//               ))}
//             </SelectContent>
//           </Select>
//         </div>

//         <div>
//           <label className="text-sm font-medium">ุงููุญุงูุธุฉ *</label>
//           <Input value={data.location.state} onChange={e => update({ state: e.target.value })} />
//         </div>

//         <div>
//           <label className="text-sm font-medium">ุงููุฏููุฉ *</label>
//           <Input value={data.location.city} onChange={e => update({ city: e.target.value })} />
//         </div>
//       </div>

//       <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
//         <div>
//           <label className="text-sm font-medium">ุงูุฑูุฒ ุงูุจุฑูุฏู</label>
//           <Input value={data.location.zip} onChange={e => update({ zip: e.target.value })} />
//         </div>

//         <div className="md:col-span-2">
//           <label className="text-sm font-medium">ุงูุนููุงู ุงูุชูุตููู</label>
//           <Input value={data.location.street} onChange={e => update({ street: e.target.value })} placeholder="ุงูุดุงุฑุนุ ุงููุนุงูู ุงููุฑูุจุฉ..." />
//         </div>
//       </div>
//     </div>
//   );
// }

// function StepCapacity({ data, setData }) {
//   const update = patch => setData(d => ({ ...d, capacity: { ...d.capacity, ...patch } }));
//   const totalBeds = Object.values(data.capacity.beds || {}).reduce((s, v) => s + Number(v || 0), 0);

//   return (
//     <div className="space-y-6">
//       <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
//         <div>
//           <label className="text-sm font-medium">ุฃูุตู ุนุฏุฏ ุถููู *</label>
//           <Input type="number" min={1} value={data.capacity.maxGuests} onChange={e => update({ maxGuests: Math.max(1, Number(e.target.value) || 1) })} />
//         </div>

//         <div>
//           <label className="text-sm font-medium">ุนุฏุฏ ุบุฑู ุงูููู</label>
//           <Input type="number" min={0} value={data.capacity.bedrooms} onChange={e => update({ bedrooms: Math.max(0, Number(e.target.value) || 0) })} />
//         </div>
//       </div>

//       <div className="space-y-3">
//         <label className="text-sm font-medium">ุฃููุงุน ุงูุฃุณุฑูุฉ ุงููุชููุฑุฉ</label>
//         <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
//           {bedTypes.map(b => (
//             <div key={b.key} className="flex items-center justify-between border rounded-lg p-3">
//               <span className="text-sm">{b.label}</span>
//               <div className="flex items-center gap-2">
//                 <Button type="button" variant="outline" onClick={() => update({ beds: { ...data.capacity.beds, [b.key]: Math.max(0, (data.capacity.beds[b.key] || 0) - 1) } })}>โ</Button>
//                 <Input
//                   type="number"
//                   min={0}
//                   value={data.capacity.beds[b.key] || 0}
//                   onChange={e => update({ beds: { ...data.capacity.beds, [b.key]: Math.max(0, Number(e.target.value) || 0) } })}
//                   className="w-20 text-center"
//                 />
//                 <Button type="button" variant="outline" onClick={() => update({ beds: { ...data.capacity.beds, [b.key]: Math.min(20, (data.capacity.beds[b.key] || 0) + 1) } })}>+</Button>
//               </div>
//             </div>
//           ))}
//         </div>
//         <p className="text-xs text-muted-foreground">ุฅุฌูุงูู ุงูุฃุณุฑูุฉ: {totalBeds}</p>
//       </div>
//     </div>
//   );
// }

// function StepFeatures({ data, setData }) {
//   const updateAmenities = (category, item) => {
//     const current = data.features.amenities[category] || [];
//     const exists = current.includes(item);
//     const newItems = exists ? current.filter(i => i !== item) : [...current, item];
//     setData(d => ({ ...d, features: { ...d.features, amenities: { ...d.features.amenities, [category]: newItems } } }));
//   };

//   const toggleFeature = (list, item, key) => {
//     const current = data.features[key] || [];
//     const exists = current.includes(item);
//     const newItems = exists ? current.filter(i => i !== item) : [...current, item];
//     setData(d => ({ ...d, features: { ...d.features, [key]: newItems } }));
//   };

//   return (
//     <div className="space-y-6">
//       <div className="space-y-3">
//         <h3 className="text-md font-semibold">ุงูุฎุฏูุงุช ุงูุฃุณุงุณูุฉ</h3>
//         <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
//           {basicAmenities.map(item => (
//             <div key={item} className="flex items-center space-x-2 space-x-reverse">
//               <Checkbox id={`basic-${item}`} checked={(data.features.amenities.basic || []).includes(item)} onCheckedChange={() => updateAmenities('basic', item)} />
//               <label htmlFor={`basic-${item}`} className="text-sm cursor-pointer">{item}</label>
//             </div>
//           ))}
//         </div>
//       </div>

//       <div className="space-y-3">
//         <h3 className="text-md font-semibold">ูุฑุงูู ุงูุญูุงู</h3>
//         <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
//           {bathAmenities.map(item => (
//             <div key={item} className="flex items-center space-x-2 space-x-reverse">
//               <Checkbox id={`bath-${item}`} checked={(data.features.amenities.bath || []).includes(item)} onCheckedChange={() => updateAmenities('bath', item)} />
//               <label htmlFor={`bath-${item}`} className="text-sm cursor-pointer">{item}</label>
//             </div>
//           ))}
//         </div>
//       </div>

//       <div className="space-y-3">
//         <h3 className="text-md font-semibold">ูุฑุงูู ุงููุทุจุฎ</h3>
//         <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
//           {kitchenAmenities.map(item => (
//             <div key={item} className="flex items-center space-x-2 space-x-reverse">
//               <Checkbox id={`kitchen-${item}`} checked={(data.features.amenities.kitchen || []).includes(item)} onCheckedChange={() => updateAmenities('kitchen', item)} />
//               <label htmlFor={`kitchen-${item}`} className="text-sm cursor-pointer">{item}</label>
//             </div>
//           ))}
//         </div>
//       </div>

//       <div className="space-y-3">
//         <h3 className="text-md font-semibold">ูุฑุงูู ุฎุงุฑุฌูุฉ</h3>
//         <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
//           {outdoorAmenities.map(item => (
//             <div key={item} className="flex items-center space-x-2 space-x-reverse">
//               <Checkbox id={`outdoor-${item}`} checked={(data.features.amenities.outdoor || []).includes(item)} onCheckedChange={() => updateAmenities('outdoor', item)} />
//               <label htmlFor={`outdoor-${item}`} className="text-sm cursor-pointer">{item}</label>
//             </div>
//           ))}
//         </div>
//       </div>

//       <div className="space-y-3">
//         <h3 className="text-md font-semibold">ุฎุฏูุงุช ุนุงูุฉ</h3>
//         <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
//           {facilities.map(item => (
//             <div key={item} className="flex items-center space-x-2 space-x-reverse">
//               <Checkbox id={`facility-${item}`} checked={(data.features.facilities || []).includes(item)} onCheckedChange={() => toggleFeature(facilities, item, 'facilities')} />
//               <label htmlFor={`facility-${item}`} className="text-sm cursor-pointer">{item}</label>
//             </div>
//           ))}
//         </div>
//       </div>
//     </div>
//   );
// }

// function StepEnvironment({ data, setData }) {
//   const toggleFeature = (list, item, key) => {
//     const current = data.environment[key] || [];
//     const exists = current.includes(item);
//     const newItems = exists ? current.filter(i => i !== item) : [...current, item];
//     setData(d => ({ ...d, environment: { ...d.environment, [key]: newItems } }));
//   };

//   const updateSeclusion = value => setData(d => ({ ...d, environment: { ...d.environment, seclusion: value } }));

//   return (
//     <div className="space-y-6">
//       <div className="space-y-3">
//         <h3 className="text-md font-semibold">ููุน ุงูุชุถุงุฑูุณ ุงููุญูุทู ุจุงููุฎูู</h3>
//         <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
//           {terrainOptions.map(item => (
//             <div key={item} className="flex items-center space-x-2 space-x-reverse">
//               <Checkbox id={`terrain-${item}`} checked={(data.environment.terrain || []).includes(item)} onCheckedChange={() => toggleFeature(terrainOptions, item, 'terrain')} />
//               <label htmlFor={`terrain-${item}`} className="text-sm cursor-pointer">{item}</label>
//             </div>
//           ))}
//         </div>
//       </div>

//       <div className="space-y-3">
//         <label className="text-md font-semibold">ูุณุชูู ุงูุนุฒูุฉ</label>
//         <Select value={data.environment.seclusion || ""} onValueChange={updateSeclusion}>
//           <SelectTrigger dir="rtl"><SelectValue dir="rtl" placeholder="ุงุฎุชุฑ ูุณุชูู ุงูุนุฒูุฉ" /></SelectTrigger>
//           <SelectContent dir="rtl">
//             {seclusionOptions.map(option => <SelectItem key={option} value={option}>{option}</SelectItem>)}
//           </SelectContent>
//         </Select>
//       </div>

//       <div className="space-y-3">
//         <h3 className="text-md font-semibold">ุฃูุดุทุฉ ูุชููุฑุฉ</h3>
//         <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
//           {activities.map(item => (
//             <div key={item} className="flex items-center space-x-2 space-x-reverse">
//               <Checkbox id={`activity-${item}`} checked={(data.environment.activities || []).includes(item)} onCheckedChange={() => toggleFeature(activities, item, 'activities')} />
//               <label htmlFor={`activity-${item}`} className="text-sm cursor-pointer">{item}</label>
//             </div>
//           ))}
//         </div>
//       </div>

//       <div className="space-y-3">
//         <h3 className="text-md font-semibold">ูุณุงุญุงุช ูุดุชุฑูุฉ</h3>
//         <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
//           {sharedSpaces.map(item => (
//             <div key={item} className="flex items-center space-x-2 space-x-reverse">
//               <Checkbox id={`shared-${item}`} checked={(data.environment.sharedSpaces || []).includes(item)} onCheckedChange={() => toggleFeature(sharedSpaces, item, 'sharedSpaces')} />
//               <label htmlFor={`shared-${item}`} className="text-sm cursor-pointer">{item}</label>
//             </div>
//           ))}
//         </div>
//       </div>
//     </div>
//   );
// }

// function StepRulesPricing({ data, setData }) {
//   const updateRules = patch => setData(d => ({ ...d, rules: { ...d.rules, ...patch } }));
//   const updatePricing = patch => setData(d => ({ ...d, pricing: { ...d.pricing, ...patch } }));

//   return (
//     <div className="space-y-6">
//       <div className="space-y-4">
//         <h3 className="text-md font-semibold">ุฃููุงุช ุงูุฏุฎูู ูุงูุฎุฑูุฌ</h3>
//         <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
//           <div>
//             <label className="text-sm font-medium"> ุชุณุฌูู ุงูุฏุฎูู</label>
//             <Input type="time" value={data.rules.checkInFrom} onChange={e => updateRules({ checkInFrom: e.target.value })} />
//           </div>
//           <div>
//             <label className="text-sm font-medium">ุชุณุฌูู ุงูุฎุฑูุฌ</label>
//             <Input type="time" value={data.rules.checkOut} onChange={e => updateRules({ checkOut: e.target.value })} />
//           </div>
//           <div>
//             <label className="text-sm font-medium">ุงูุญุฏ ุงูุฃุฏูู ููุนูุฑ (ุณูุฉ)</label>
//             <Input type="number" min={0} value={data.rules.minAge} onChange={e => updateRules({ minAge: Math.max(0, Number(e.target.value) || 0) })} />
//           </div>
//         </div>
//       </div>

//       <div className="space-y-4">
//         <h3 className="text-md font-semibold">ุงูุชุณุนูุฑ (ุฏููุงุฑ ุฃูุฑููู) *</h3>
//         <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//           <div className="space-y-3 p-4 border rounded-lg">
//             <h4 className="font-medium text-center">ุงูุฃูุงู ุงูุนุงุฏูุฉ</h4>
//             <div>
//               <label className="text-sm">ูุน ุงููุจูุช</label>
//               <Input type="number" min={0} step="0.5" value={data.pricing.weekday_with_accommodation} onChange={e => updatePricing({ weekday_with_accommodation: Math.max(0, Number(e.target.value) || 0) })} />
//             </div>
//             <div>
//               <label className="text-sm">ุจุฏูู ุงููุจูุช</label>
//               <Input type="number" min={0} step="0.5" value={data.pricing.weekday_without_accommodation} onChange={e => updatePricing({ weekday_without_accommodation: Math.max(0, Number(e.target.value) || 0) })} />
//             </div>
//           </div>
//           <div className="space-y-3 p-4 border rounded-lg">
//             <h4 className="font-medium text-center">ุฃูุงู ุงูุนุทู ูุงูููุงุณุจุงุช</h4>
//             <div>
//               <label className="text-sm">ูุน ุงููุจูุช</label>
//               <Input type="number" min={0} step="0.5" value={data.pricing.holiday_with_accommodation} onChange={e => updatePricing({ holiday_with_accommodation: Math.max(0, Number(e.target.value) || 0) })} />
//             </div>
//             <div>
//               <label className="text-sm">ุจุฏูู ุงููุจูุช</label>
//               <Input type="number" min={0} step="0.5" value={data.pricing.holiday_without_accommodation} onChange={e => updatePricing({ holiday_without_accommodation: Math.max(0, Number(e.target.value) || 0) })} />
//             </div>
//           </div>
//         </div>
//         <div className="text-xs text-muted-foreground">ุฃุฏุฎู ุงูููู ุงูููุงุณุจุฉุ ูููููู ุชุฑู ุบูุฑ ุงููุชุงุญ ุจูููุฉ 0.</div>
//       </div>

//       <div className="space-y-2">
//         <label className="text-sm font-medium">ููุงุนุฏ ูุดุฑูุท ุฅุถุงููุฉ (ุงุฎุชูุงุฑู)</label>
//         <Textarea rows={3} value={data.rules.additionalRules || ""} onChange={e => setData(d => ({ ...d, rules: { ...d.rules, additionalRules: e.target.value } }))} placeholder="ูุซุงู: ูุฏูุก ุจุนุฏ 10 ูุ ููููุน ุงูุชุฏุฎูู..." />
//       </div>
//     </div>
//   );
// }

// function StepImages({ data, setData }) {
//   return (
//     <div className="space-y-4">
//       <div>
//         <label className="text-sm font-medium">ุตูุฑ ุงููุฎูู *</label>
//         <Input type="file" multiple accept="image/*" onChange={e => setData(d => ({ ...d, files: Array.from(e.target.files || []) }))} />
//         <div className="text-xs text-muted-foreground mt-2">ุงุฑูุน ุนุฏุฉ ุตูุฑ ุนุงููุฉ ุงูุฌูุฏุฉ. ุงูุตูุฑุฉ ุงูุฃููู ุณุชููู ุงูุฑุฆูุณูุฉ.</div>
//       </div>
//       {data.files.length > 0 && (<div className="text-sm text-green-600">ุชู ุงุฎุชูุงุฑ {data.files.length} ุตูุฑุฉ</div>)}
//     </div>
//   );
// }

// function StepReview({ data }) {
//   const totalBeds = Object.values(data.capacity.beds || {}).reduce((s, v) => s + Number(v || 0), 0);

//   return (
//     <div className="space-y-6 text-sm">
//       <div className="flex items-center gap-2 text-emerald-600"><CheckCircle2 className="h-5 w-5" /> ูุฑุงุฌุนุฉ ุงูุจูุงูุงุช ูุจู ุงูุฅุฑุณุงู</div>
//       <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//         <div className="space-y-2">
//           <h4 className="font-semibold">ุฅูุดุงุก ูุฎูู ุฌุฏูุฏ</h4>
//           <div><strong>ุงูุฏููุฉ:</strong> {data.profile.country || "-"}</div>
//           <div><strong>ุงููุซููุฉ:</strong> {data.profile.docType || "-"} / {data.profile.docNumber || "-"} / {data.profile.docCountry || "-"}</div>
//           <div><strong>ุงูุนููุฉ:</strong> USD โ ุงูุฏููุงุฑ ุงูุฃูุฑููู</div>
//           <div><strong>ุงูุณุจุจ:</strong> {data.profile.why || "-"}</div>
//         </div>
//         <div className="space-y-2">
//           <h4 className="font-semibold">ุงููุฎูู</h4>
//           <div><strong>ุงูุงุณู:</strong> {data.basics.name || "-"}</div>
//           <div><strong>ุงูููุน:</strong> {data.basics.propertyType || "-"}</div>
//           <div><strong>ุงููููุน:</strong> {[data.location.city, data.location.state, data.location.country].filter(Boolean).join(", ") || "-"}</div>
//           <div><strong>ุงูุถููู:</strong> {data.capacity.maxGuests || 0}</div>
//           <div><strong>ุบุฑู ุงูููู:</strong> {data.capacity.bedrooms || 0}</div>
//           <div><strong>ุฅุฌูุงูู ุงูุฃุณุฑูุฉ:</strong> {totalBeds}</div>
//         </div>

//         <div className="space-y-2">
//           <h4 className="font-semibold">ุงูุชุณุนูุฑ</h4>
//           <div><strong>ุนุงุฏู ูุน ูุจูุช:</strong> {data.pricing.weekday_with_accommodation || 0}</div>
//           <div><strong>ุนุงุฏู ุจุฏูู ูุจูุช:</strong> {data.pricing.weekday_without_accommodation || 0}</div>
//           <div><strong>ุนุทูุฉ ูุน ูุจูุช:</strong> {data.pricing.holiday_with_accommodation || 0}</div>
//           <div><strong>ุนุทูุฉ ุจุฏูู ูุจูุช:</strong> {data.pricing.holiday_without_accommodation || 0}</div>
//         </div>

//         <div className="space-y-2">
//           <h4 className="font-semibold">ุงูุฎุฏูุงุช ูุงูุจูุฆุฉ</h4>
//           <div><strong>ุฃุณุงุณูุฉ:</strong> {(data.features.amenities.basic || []).length} ุนูุตุฑ</div>
//           <div><strong>ุญูุงู:</strong> {(data.features.amenities.bath || []).length} ุนูุตุฑ</div>
//           <div><strong>ูุทุจุฎ:</strong> {(data.features.amenities.kitchen || []).length} ุนูุตุฑ</div>
//           <div><strong>ุฎุงุฑุฌูุฉ:</strong> {(data.features.amenities.outdoor || []).length} ุนูุตุฑ</div>
//           <div><strong>ุชุถุงุฑูุณ:</strong> {(data.environment.terrain || []).length} ููุน</div>
//           <div><strong>ุฃูุดุทุฉ:</strong> {(data.environment.activities || []).length} ูุดุงุท</div>
//           <div><strong>ุนุฒูุฉ:</strong> {data.environment.seclusion || "-"}</div>
//           <div><strong>ุตูุฑ:</strong> {data.files.length}</div>
//         </div>
//       </div>
//     </div>
//   );
// }


// export default function JoinUs() {
//   const { toast } = useToast();

//   const [privacyOpen, setPrivacyOpen] = useState(false);
//   const [termsOpen, setTermsOpen] = useState(false);

//   const [form, setForm] = useState({
//     profile: {
//       country: "",
//       docType: "",
//       docNumber: "",
//       docCountry: "",
//       why: "",
//       agreeTerms: true,
//     },
//     basics: { name: "", propertyType: "", website: "" },
//     description: { summary: "", guestServices: "" },
//     location: { country: "", state: "", city: "", zip: "", street: "" },
//     capacity: { maxGuests: 1, bedrooms: 0, beds: bedTypes.reduce((acc, b) => ({ ...acc, [b.key]: 0 }), {}) },
//     features: { amenities: { basic: [], bath: [], kitchen: [], outdoor: [] }, facilities: [] },
//     environment: { terrain: [], seclusion: "", activities: [], sharedSpaces: [] },
//     rules: { checkInFrom: "14:00", checkInTo: "22:00", checkOut: "12:00", additionalRules: "", minAge: 18 },
//     pricing: {
//       weekday_with_accommodation: 0,
//       weekday_without_accommodation: 0,
//       holiday_with_accommodation: 0,
//       holiday_without_accommodation: 0,
//     },
//     files: [],
//   });

//   const steps = useMemo(() => ([
//     { key: "profile", title: "ุฅูุดุงุก ูุฎูู ุฌุฏูุฏ", comp: <StepProfile data={form} setData={setForm} onOpenPrivacy={() => setPrivacyOpen(true)} onOpenTerms={() => setTermsOpen(true)} /> },
//     { key: "basics", title: "ุงูุฃุณุงุณูุงุช", comp: <StepBasics data={form} setData={setForm} /> },
//     { key: "location", title: "ุงููููุน", comp: <StepLocation data={form} setData={setForm} /> },
//     { key: "capacity", title: "ุงูุณุนุฉ", comp: <StepCapacity data={form} setData={setForm} /> },
//     { key: "features", title: "ุงููุฑุงูู ูุงูุฎุฏูุงุช", comp: <StepFeatures data={form} setData={setForm} /> },
//     { key: "environment", title: "ุงูุจูุฆุฉ ูุงูุฃูุดุทุฉ", comp: <StepEnvironment data={form} setData={setForm} /> },
//     { key: "rulesPricing", title: "ุงูููุงุนุฏ ูุงูุชุณุนูุฑ", comp: <StepRulesPricing data={form} setData={setForm} /> },
//     { key: "images", title: "ุงูุตูุฑ", comp: <StepImages data={form} setData={setForm} /> },
//     { key: "review", title: "ูุฑุงุฌุนุฉ", comp: <StepReview data={form} /> },
//   ]), [form]);

//   const [stepIndex, setStepIndex] = useState(0);
//   const isFirst = stepIndex === 0;
//   const isLast = stepIndex === steps.length - 1;

//   const validateStep = () => {
//     const s = steps[stepIndex].key;

//     if (s === "profile") {
//       const p = form.profile;
//       if (!p.docType) { toast({ title: "ููุน ุงููุซููุฉ ูุทููุจ", variant: "destructive" }); return false; }
//       if (!p.docNumber?.trim()) { toast({ title: "ุฑูู ุงููุซููุฉ ูุทููุจ", variant: "destructive" }); return false; }
//       if (!p.docCountry) { toast({ title: "ุจูุฏ ุงูุฅุตุฏุงุฑ ูุทููุจ", variant: "destructive" }); return false; }
//       if (!p.agreeTerms) { toast({ title: "ูุฌุจ ุงูููุงููุฉ ุนูู ุงูุดุฑูุท", variant: "destructive" }); return false; }
//     }

//     if (s === "basics") {
//       if (!form.basics.name.trim()) { toast({ title: "ุงุณู ุงููุฎูู ูุทููุจ", variant: "destructive" }); return false; }
//       if (!form.basics.propertyType) { toast({ title: "ููุน ุงูููููุฉ ูุทููุจ", variant: "destructive" }); return false; }
//       if (!form.description.summary.trim()) { toast({ title: "ูุตู ุงููุฎูู ูุทููุจ", variant: "destructive" }); return false; }
//     }

//     if (s === "location") {
//       if (!form.location.country.trim()) { toast({ title: "ุงูุฏููุฉ ูุทููุจุฉ", variant: "destructive" }); return false; }
//       if (!form.location.state.trim()) { toast({ title: "ุงููุญุงูุธุฉ/ุงูููุงูุฉ ูุทููุจุฉ", variant: "destructive" }); return false; }
//       if (!form.location.city.trim()) { toast({ title: "ุงููุฏููุฉ ูุทููุจุฉ", variant: "destructive" }); return false; }
//       if (!form.location.street.trim()) { toast({ title: "ุงูุนููุงู ุงูุชูุตููู ูุทููุจ", variant: "destructive" }); return false; }
//     }

//     if (s === "capacity") {
//       const totalBeds = Object.values(form.capacity.beds || {}).reduce((s, v) => s + Number(v || 0), 0);
//       if (form.capacity.maxGuests < 1) { toast({ title: "ุฃูุตู ุนุฏุฏ ุถููู ูุง ููู ุนู 1", variant: "destructive" }); return false; }
//       if (totalBeds < 1) { toast({ title: "ุฃุถู ุณุฑูุฑุงู ูุงุญุฏุงู ุนูู ุงูุฃูู", variant: "destructive" }); return false; }
//     }

//     if (s === "rulesPricing") {
//       if ((form.rules.minAge ?? 0) < 0) { toast({ title: "ุงูุญุฏ ุงูุฃุฏูู ููุนูุฑ ุบูุฑ ุตุงูุญ", variant: "destructive" }); return false; }
//       const p = form.pricing;
//       const prices = [p.weekday_with_accommodation, p.weekday_without_accommodation, p.holiday_with_accommodation, p.holiday_without_accommodation];
//       const hasInvalid = prices.some(x => !(Number.isFinite(x) && x >= 0));
//       if (hasInvalid) { toast({ title: "ุชุญูู ูู ุงูุฃุณุนุงุฑ", description: "ูุฌุจ ุฅุฏุฎุงู ููู ุตุญูุญุฉ ููุฃุณุนุงุฑ.", variant: "destructive" }); return false; }
//       if (prices.every(x => x === 0)) { toast({ title: "ูุฌุจ ุฅุฏุฎุงู ุณุนุฑ ูุงุญุฏ ุนูู ุงูุฃูู", variant: "destructive" }); return false; }
//     }

//     if (s === "images") {
//       if ((form.files?.length || 0) < 5) { toast({ title: "ุงูุตูุฑ ูุทููุจุฉ", description: "ูุฑุฌู ุฑูุน 5 ุตูุฑ ุนูู ุงูุฃูู.", variant: "destructive" }); return false; }
//     }

//     return true;
//   };


//   const next = () => {
//     if (validateStep()) setStepIndex(i => Math.min(i + 1, steps.length - 1));
//   };

//   const prev = () => setStepIndex(i => Math.max(i - 1, 0));

//   const submit = async () => {
//     try {
//       const payload = {
//         profile: {
//           country: form.profile.country || null,
//           document: {
//             type: form.profile.docType,
//             number: form.profile.docNumber?.trim(),
//             countryOfIssue: form.profile.docCountry
//           },
//           reason: form.profile.why || null,
//           currency: "USD",
//         },
//         basics: {
//           name: form.basics.name.trim(),
//           propertyType: form.basics.propertyType || null,
//           website: form.basics.website || null
//         },
//         description: {
//           summary: form.description.summary || null,
//           guestServices: form.description.guestServices || null
//         },
//         location: {
//           country: form.location.country || null,
//           state: form.location.state || null,
//           city: form.location.city || null,
//           zip: form.location.zip || null,
//           street: form.location.street || null
//         },
//         capacity: {
//           maxGuests: form.capacity.maxGuests,
//           bedrooms: form.capacity.bedrooms,
//           beds: form.capacity.beds
//         },
//         facilities: form.features.facilities,
//         amenities: form.features.amenities,
//         sharedSpaces: form.environment.sharedSpaces,
//         seclusion: form.environment.seclusion ? [form.environment.seclusion] : [],
//         activities: { options: form.environment.activities },
//         terrain: form.environment.terrain,
//         rules: {
//           checkInFrom: form.rules.checkInFrom,
//           checkInTo: form.rules.checkInTo,
//           checkOut: form.rules.checkOut,
//           minAge: form.rules.minAge,
//           additionalRules: form.rules.additionalRules || null
//         },
//         booking: {},
//         pricing: {
//           weekday: {
//             withAccommodation: form.pricing.weekday_with_accommodation,
//             withoutAccommodation: form.pricing.weekday_without_accommodation
//           },
//           holiday: {
//             withAccommodation: form.pricing.holiday_with_accommodation,
//             withoutAccommodation: form.pricing.holiday_without_accommodation
//           }
//         }
//       };

//       const fd = new FormData();
//       fd.append("joinDataJson", JSON.stringify(payload));
//       for (const f of form.files) fd.append("images", f);

//       await api.post("/api/camp-requests", fd, { headers: { "Content-Type": "multipart/form-data" } });

//       toast({ title: "ุชู ุฅุฑุณุงู ุงูุทูุจ ุจูุฌุงุญ!", description: "ุณูุชู ุงูุชูุงุตู ูุนู ุฎูุงู 3-5 ุฃูุงู ุนูู." });

//       setStepIndex(0);
//     } catch (err) {
//       const message = err?.response?.data?.message || "ุชุนุฐุฑ ุฅุฑุณุงู ุงูุทูุจ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.";
//       toast({ title: "ุฎุทุฃ", description: message, variant: "destructive" });
//     }
//   };


//   return (
//     <div dir="rtl">
//       {/* ุฑุฃุณ */}
//       <section className="border-b bg-muted/40">
//         <div className="container py-8">
//           <h1 className="text-2xl md:text-3xl font-bold">ุงูุถู ูููุฏู ูุฎูู</h1>

//           <p className="text-muted-foreground mt-2">ุงุจุฏุฃ ุจุฅูุดุงุก ูููู ุงูุดุฎุตู ุซู ุฃููู ุจูุงูุงุช ุงููุฎูู ุฎุทูุฉ ุจุฎุทูุฉ.</p>
//         </div>
//       </section>

//       {/* ุงููุนุงูุฌ */}
//       <section className="py-8">
//         <div className="container max-w-4xl">
//           <div className="mb-8">
//             <div className="flex items-center justify-center mb-4">
//               <span className="text-sm font-medium">ุงูุฎุทูุฉ {stepIndex + 1} ูู {steps.length}</span>
//             </div>
//             <div className="w-full bg-gray-200 rounded-full h-2">
//               <div
//                 className="bg-primary h-2 rounded-full transition-all duration-300"
//                 style={{ width: `${((stepIndex + 1) / steps.length) * 100}%` }}
//               >
//               </div>
//             </div>
//           </div>

//           <div className="flex flex-wrap items-center justify-center gap-2 mb-6 text-sm">
//             {steps.map((s, idx) => (
//               <div key={s.key} className={`px-3 py-1 rounded-full border text-center ${
//                 idx === stepIndex ? "bg-primary text-primary-foreground" :
//                 idx < stepIndex ? "bg-green-100 text-green-700 border-green-300" : "bg-background"
//               }`}>
//                 {s.title}
//               </div>
//             ))}
//           </div>

//           <div className="rounded-lg border bg-card p-6">
//             <h2 className="text-xl font-semibold mb-4">{steps[stepIndex].title}</h2>
//             {steps[stepIndex].comp}
//           </div>

//           <div className="mt-6 flex items-center justify-between">
//             <Button variant="outline" onClick={() => setStepIndex(i => Math.max(i - 1, 0))} disabled={isFirst} className="inline-flex items-center gap-2">
//               <ChevronRight className="h-4 w-4 rotate-180" /> ุงูุณุงุจู
//             </Button>
//             {!isLast ? (
//               <Button onClick={() => { if(validateStep()) setStepIndex(i => Math.min(i + 1, steps.length - 1)); }} className="inline-flex items-center gap-2">
//                 ุงูุชุงูู <ChevronLeft className="h-4 w-4" />
//               </Button>
//             ) : (
//               <Button onClick={submit} className="inline-flex items-center gap-2 bg-green-600 hover:bg-green-700">
//                 ุฅุฑุณุงู ุงูุทูุจ <CheckCircle2 className="h-4 w-4" />
//               </Button>
//             )}
//           </div>
//         </div>
//       </section>

//       <Dialog open={privacyOpen} onOpenChange={setPrivacyOpen}>
//         <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto" dir="rtl">
//           <DialogHeader><DialogTitle>ุณูุงุณุฉ ุงูุฎุตูุตูุฉ โ ููุตุฉ ูุงูุจูู (Camply)</DialogTitle></DialogHeader>
//           <div className="space-y-4 text-sm leading-7">
//             {/* ูุต ุณูุงุณุฉ ุงูุฎุตูุตูุฉ ูุงููุงู ููุง ูู ุงูุณุคุงู */}
//             {/* ููููู ุฅุฏุฎุงู ุงููุต ููุง ุจููุณ ุงูุชูุณูู */}
//           </div>
//         </DialogContent>
//       </Dialog>

//       <Dialog open={termsOpen} onOpenChange={setTermsOpen}>
//         <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto" dir="rtl">
//           <DialogHeader><DialogTitle>ุงูุดุฑูุท ูุงูุฃุญูุงู โ ููุตุฉ ูุงูุจูู (Camply)</DialogTitle></DialogHeader>
//           <div className="space-y-4 text-sm leading-7">
//             {/* ูุต ุงูุดุฑูุท ูุงูุฃุญูุงู ูุงููุงู ููุง ูู ุงูุณุคุงู */}
//             {/* ููููู ุฅุฏุฎุงู ุงููุต ููุง ุจููุณ ุงูุชูุณูู */}
//           </div>
//         </DialogContent>
//       </Dialog>
//     </div>
//   );
// }




















import React, { useMemo, useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/components/ui/use-toast";
import { api } from "@/lib/api";
import { ChevronLeft, ChevronRight, CheckCircle2 } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";

const elevenCountries = [
  { code: "EG", label: "ูุตุฑ" },
  { code: "SA", label: "ุงูุณุนูุฏูุฉ" },
  { code: "AE", label: "ุงูุฅูุงุฑุงุช" },
  { code: "KW", label: "ุงููููุช" },
  { code: "QA", label: "ูุทุฑ" },
  { code: "BH", label: "ุงูุจุญุฑูู" },
  { code: "OM", label: "ุนูุงู" },
  { code: "JO", label: "ุงูุฃุฑุฏู" },
  { code: "MA", label: "ุงููุบุฑุจ" },
  { code: "DZ", label: "ุงูุฌุฒุงุฆุฑ" },
  { code: "TN", label: "ุชููุณ" },
];

const documentTypes = [
  { code: "ID", label: "Identity card" },
  { code: "PASS", label: "Passport" },
  { code: "DL", label: "Driving license" },
];

const propertyTypes = [
  "ูุฎููุงุช ุงูุฎูุงู ุงูุชูููุฏูุฉ (Tent Camping)",
  "(RV / Caravan Camping) ูุฎููุงุช ุงููุฑูุงูุงุช ",
  "ูุฎููุงุช ุงูุบุงุจุงุช ูุงูุฌุจุงู (Forest / Mountain Camps)",
  "ุงูุชุฎููู ุงูููุฏูู (Glamorous Camping)",
  "Safari / Dome / Bubble ุฎูุงู",
  "ูุฎููุงุช ุจูุฆูุฉ (Eco Camps)",
  "ูุฎููุงุช ุงููุฒุงุฑุน (Farm Camps)",
  "ูุฎููุงุช ุงูุดูุงุทุฆ (Beach Camps)",
  "ูุฎููุงุช ุงูุตุญุฑุงุก (Desert Camps)",
  "ูุฎููุงุช ุงููุบุงูุฑุงุช (Adventure Camps)",
  "ูุฎููุงุช ุงูููู ูุงููุฌูู (Astronomy Camps)",
  "ูุฎููุงุช ุงูููุบุง ูุงูุนุงููุฉ (Wellness Camps)",
];

const bedTypes = [
  { key: "king", label: "ุณุฑูุฑ ูุฒุฏูุฌ ูุจูุฑ (ูููุบ)" },
  { key: "queen", label: "ุณุฑูุฑ ูุฒุฏูุฌ (ูููู)" },
  { key: "double", label: "ุณุฑูุฑ ูุฒุฏูุฌ ุนุงุฏู" },
  { key: "twin", label: "ุณุฑูุฑ ููุฑุฏ" },
  { key: "bunk", label: "ุณุฑูุฑ ุจุทุงุจููู" },
  { key: "sofa", label: "ุณุฑูุฑ ุฃุฑููุฉ" },
  { key: "crib", label: "ุณุฑูุฑ ุฃุทูุงู" },
  { key: "air", label: "ุณุฑูุฑ ููุงุฆู / ูุงุจู ููููุฎ" },
];

const basicAmenities = ["WiFi","ุชูููู","ุชุฏูุฆุฉ","ูููุฏ ููุฑุจุงุก","ุฅุถุงุกุฉ"];
const bathAmenities = ["ุญูุงู ุฎุงุต","ุฏุด ุณุงุฎู","ููุงุดู","ุตุงุจูู","ุดุงูุจู"];
const kitchenAmenities = ["ูุทุจุฎ ูุฌูุฒ","ุซูุงุฌุฉ","ูููุฏ","ุฃูุงูู ุทุจุฎ","ููุงู ุดุฑุจ"];
const outdoorAmenities = ["ุดูุงุก","ุฌูุณุฉ ุฎุงุฑุฌูุฉ","ูุฑุงุณู","ุทุงููุฉ","ูุธูุฉ"];
const facilities = ["ูููู ุณูุงุฑุงุช","ุฃูู","ูุธุงูุฉ","ุงุณุชูุจุงู 24 ุณุงุนุฉ","ุฎุฏูุฉ ุบุฑู"];
const sharedSpaces = ["ุตุงูุฉ ูุดุชุฑูุฉ","ูุทุจุฎ ูุดุชุฑู","ุญุฏููุฉ","ูุณุจุญ","ููุนุจ"];
const seclusionOptions = ["ููุนุฒู ุชูุงูุงู","ุดุจู ููุนุฒู","ุจุฌุงูุจ ูุฎููุงุช ุฃุฎุฑู","ูู ููุทูุฉ ุณูุงุญูุฉ"];
const activities = ["ุฑุญูุงุช ุงุณุชูุดุงููุฉ","ุณูุงุฑู","ุตูุฏ","ุณุจุงุญุฉ","ุชุณูู","ูุฌูู"];
const terrainOptions = ["ุตุญุฑุงุก","ุฌุจุงู","ุดุงุทุฆ","ูุงุญุฉ","ุบุงุจุฉ","ุณููู"];

function StepProfile({ data, setData, onOpenPrivacy, onOpenTerms }) {
  const update = (patch) => setData(d => ({ ...d, profile: { ...d.profile, ...patch } }));
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label className="text-sm font-medium">ููุน ุงููุซููุฉ (Document type)*</label>
          <Select value={data.profile.docType} onValueChange={(v) => update({ docType: v })}>
            <SelectTrigger><SelectValue placeholder="ุงุฎุชุฑ ููุน ุงููุซููุฉ" /></SelectTrigger>
            <SelectContent>
              {documentTypes.map(dt => <SelectItem key={dt.code} value={dt.code}>{dt.label}</SelectItem>)}
            </SelectContent>
          </Select>
        </div>
        <div>
          <label className="text-sm font-medium">ุฑูู ุงููุซููุฉ (Document number)*</label>
          <Input value={data.profile.docNumber} onChange={e => update({ docNumber: e.target.value })} />
        </div>
        <div>
          <label className="text-sm font-medium">ุจูุฏ ุงูุฅุตุฏุงุฑ (Country of issue)*</label>
          <Select value={data.profile.docCountry} onValueChange={(v) => update({ docCountry: v })}>
            <SelectTrigger><SelectValue placeholder="ุงุฎุชุฑ ุจูุฏ ุงูุฅุตุฏุงุฑ" /></SelectTrigger>
            <SelectContent>
              {elevenCountries.map(c => <SelectItem key={c.code} value={c.code}>{c.label}</SelectItem>)}
            </SelectContent>
          </Select>
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
        <div>
          <label className="text-sm font-medium">ุงูุฏููุฉ (Country)</label>
          <Select value={data.profile.country} onValueChange={(v) => update({ country: v })}>
            <SelectTrigger><SelectValue placeholder="ุงุฎุชุฑ ุงูุฏููุฉ" /></SelectTrigger>
            <SelectContent className="max-h-60 overflow-auto" dir="rtl">
              {elevenCountries.map(c => <SelectItem key={c.code} value={c.code}>{c.label}</SelectItem>)}
            </SelectContent>
          </Select>
        </div>
        <div>
          <label className="text-sm font-medium">ุงูุนููุฉ</label>
          <Input value="USD โ ุงูุฏููุงุฑ ุงูุฃูุฑููู" readOnly />
        </div>
      </div>
      <div className="mt-4">
        <label className="text-sm font-medium">ููุงุฐุง ุชุฑุบุจ ูู ุงูุฅุฏุฑุงุฌุ (ุงุฎุชูุงุฑู)</label>
        <Textarea rows={3} value={data.profile.why} onChange={e => update({ why: e.target.value })} placeholder="ุงูุชุจ ุจุฅูุฌุงุฒ ุณุจุจ ุฑุบุจุชู ูู ุงูุฅุฏุฑุงุฌ..." />
      </div>
      <div className="flex flex-col gap-2 mt-4">
        <div className="flex items-center space-x-2 space-x-reverse">
          <Checkbox id="agree" checked={data.profile.agreeTerms} onCheckedChange={v => update({ agreeTerms: !!v })} />
          <label htmlFor="agree" className="text-sm cursor-pointer">โ ุฃูุงูู ุนูู ุงูุดุฑูุท ูุงูุฃุญูุงู ูุณูุงุณุฉ ุญูุงูุฉ ุงูุจูุงูุงุช</label>
        </div>
        <div className="text-xs text-muted-foreground mt-2">
          ููููู ุงูุงุทูุงุน ุนูู{" "}
          <button type="button" onClick={onOpenPrivacy} className="underline hover:text-foreground transition-colors">ุณูุงุณุฉ ุงูุฎุตูุตูุฉ</button>{" "}
          ู{" "}
          <button type="button" onClick={onOpenTerms} className="underline hover:text-foreground transition-colors">ุงูุดุฑูุท ูุงูุฃุญูุงู</button>{" "}
          ุงูุฎุงุตุฉ ุจููุตุฉ ูุงูุจูู ูุจู ุงููุชุงุจุนุฉ.
        </div>
      </div>
    </div>
  );
}

function StepBasics({ data, setData }) {
  const updateBasics = patch => setData(d => ({ ...d, basics: { ...d.basics, ...patch } }));
  const updateDesc = patch => setData(d => ({ ...d, description: { ...d.description, ...patch } }));
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="text-sm font-medium">ุงุณู ุงููุฎูู *</label>
          <Input value={data.basics.name} onChange={e => updateBasics({ name: e.target.value })} placeholder="ูุซุงู: ูุฎูู ุงูุฑูุงู ุงูุฐูุจูุฉ" />
        </div>
        <div>
          <label className="text-sm font-medium">ููุน ุงููุฎูู *</label>
          <Select value={data.basics.propertyType} onValueChange={v => updateBasics({ propertyType: v })}>
            <SelectTrigger><SelectValue placeholder="ุงุฎุชุฑ ุงูููุน" /></SelectTrigger>
            <SelectContent>
              {propertyTypes.map(t => <SelectItem key={t} value={t}>{t}</SelectItem>)}
            </SelectContent>
          </Select>
        </div>
        <div className="md:col-span-2">
          <label className="text-sm font-medium">ุงููููุน ุงูุฅููุชุฑููู (ุงุฎุชูุงุฑู)</label>
          <Input value={data.basics.website} onChange={e => updateBasics({ website: e.target.value })} placeholder="https://example.com" />
        </div>
      </div>
      <div className="space-y-2">
        <label className="text-sm font-medium">ูุตู ุงููุฎูู *</label>
        <Textarea value={data.description.summary} onChange={e => updateDesc({ summary: e.target.value })} rows={4} placeholder="ุงูุชุจ ูุตูุงู ุฌุฐุงุจุงู ููุฎููู..." />
      </div>
      <div className="space-y-2">
        <label className="text-sm font-medium">ุฎุฏูุงุช ุฅุถุงููุฉ ููุถููู</label>
        <Textarea value={data.description.guestServices} onChange={e => updateDesc({ guestServices: e.target.value })} rows={3} placeholder="ูุซุงู: ุชูุตูู ูู ุงููุทุงุฑุ ุฌููุงุช ุณูุงุญูุฉ..." />
      </div>
    </div>
  );
}

function StepLocation({ data, setData }) {
  const update = patch => setData(d => ({ ...d, location: { ...d.location, ...patch } }));

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label className="text-sm font-medium">ุงูุฏููุฉ (Country)*</label>
          <Select value={data.location.country} onValueChange={v => update({ country: v })}>
            <SelectTrigger className="w-full justify-between flex-row-reverse">
              <div className="flex-1 text-right truncate">
                <SelectValue placeholder="ุงุฎุชุฑ ุงูุฏููุฉ" />
              </div>
            </SelectTrigger>
            <SelectContent className="max-h-60 overflow-auto" dir="rtl">
              {elevenCountries.map(ct => (
                <SelectItem key={ct.code} value={ct.code}>
                  {ct.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div>
          <label className="text-sm font-medium">ุงููุญุงูุธุฉ *</label>
          <Input value={data.location.state} onChange={e => update({ state: e.target.value })} />
        </div>
        <div>
          <label className="text-sm font-medium">ุงููุฏููุฉ *</label>
          <Input value={data.location.city} onChange={e => update({ city: e.target.value })} />
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
        <div>
          <label className="text-sm font-medium">ุงูุฑูุฒ ุงูุจุฑูุฏู</label>
          <Input value={data.location.zip} onChange={e => update({ zip: e.target.value })} />
        </div>
        <div className="md:col-span-2">
          <label className="text-sm font-medium">ุงูุนููุงู ุงูุชูุตููู</label>
          <Input value={data.location.street} onChange={e => update({ street: e.target.value })} placeholder="ุงูุดุงุฑุนุ ุงููุนุงูู ุงููุฑูุจุฉ..." />
        </div>
      </div>
    </div>
  );
}

function StepCapacity({ data, setData }) {
  const update = patch => setData(d => ({ ...d, capacity: { ...d.capacity, ...patch } }));
  const totalBeds = Object.values(data.capacity.beds || {}).reduce((s, v) => s + Number(v || 0), 0);

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="text-sm font-medium">ุฃูุตู ุนุฏุฏ ุถููู *</label>
          <Input type="number" min={1} value={data.capacity.maxGuests} onChange={e => update({ maxGuests: Math.max(1, Number(e.target.value) || 1) })} />
        </div>
        <div>
          <label className="text-sm font-medium">ุนุฏุฏ ุบุฑู ุงูููู</label>
          <Input type="number" min={0} value={data.capacity.bedrooms} onChange={e => update({ bedrooms: Math.max(0, Number(e.target.value) || 0) })} />
        </div>
      </div>
      <div className="space-y-3">
        <label className="text-sm font-medium">ุฃููุงุน ุงูุฃุณุฑูุฉ ุงููุชููุฑุฉ</label>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          {bedTypes.map(b => (
            <div key={b.key} className="flex items-center justify-between border rounded-lg p-3">
              <span className="text-sm">{b.label}</span>
              <div className="flex items-center gap-2">
                <Button type="button" variant="outline" onClick={() => update({ beds: { ...data.capacity.beds, [b.key]: Math.max(0, (data.capacity.beds[b.key] || 0) - 1) } })}>โ</Button>
                <Input
                  type="number"
                  min={0}
                  value={data.capacity.beds[b.key] || 0}
                  onChange={e => update({ beds: { ...data.capacity.beds, [b.key]: Math.max(0, Number(e.target.value) || 0) } })}
                  className="w-20 text-center"
                />
                <Button type="button" variant="outline" onClick={() => update({ beds: { ...data.capacity.beds, [b.key]: Math.min(20, (data.capacity.beds[b.key] || 0) + 1) } })}>+</Button>
              </div>
            </div>
          ))}
        </div>
        <p className="text-xs text-muted-foreground">ุฅุฌูุงูู ุงูุฃุณุฑูุฉ: {totalBeds}</p>
      </div>
    </div>
  );
}

function StepFeatures({ data, setData }) {
  const updateAmenities = (category, item) => {
    const current = data.features.amenities[category] || [];
    const exists = current.includes(item);
    const newItems = exists ? current.filter(i => i !== item) : [...current, item];
    setData(d => ({ ...d, features: { ...d.features, amenities: { ...d.features.amenities, [category]: newItems } } }));
  };
  const toggleFeature = (list, item, key) => {
    const current = data.features[key] || [];
    const exists = current.includes(item);
    const newItems = exists ? current.filter(i => i !== item) : [...current, item];
    setData(d => ({ ...d, features: { ...d.features, [key]: newItems } }));
  };
  return (
    <div className="space-y-6">
      <div className="space-y-3">
        <h3 className="text-md font-semibold">ุงูุฎุฏูุงุช ุงูุฃุณุงุณูุฉ</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          {basicAmenities.map(item => (
            <div key={item} className="flex items-center space-x-2 space-x-reverse">
              <Checkbox id={`basic-${item}`} checked={(data.features.amenities.basic || []).includes(item)} onCheckedChange={() => updateAmenities('basic', item)} />
              <label htmlFor={`basic-${item}`} className="text-sm cursor-pointer">{item}</label>
            </div>
          ))}
        </div>
      </div>
      <div className="space-y-3">
        <h3 className="text-md font-semibold">ูุฑุงูู ุงูุญูุงู</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          {bathAmenities.map(item => (
            <div key={item} className="flex items-center space-x-2 space-x-reverse">
              <Checkbox id={`bath-${item}`} checked={(data.features.amenities.bath || []).includes(item)} onCheckedChange={() => updateAmenities('bath', item)} />
              <label htmlFor={`bath-${item}`} className="text-sm cursor-pointer">{item}</label>
            </div>
          ))}
        </div>
      </div>
      <div className="space-y-3">
        <h3 className="text-md font-semibold">ูุฑุงูู ุงููุทุจุฎ</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          {kitchenAmenities.map(item => (
            <div key={item} className="flex items-center space-x-2 space-x-reverse">
              <Checkbox id={`kitchen-${item}`} checked={(data.features.amenities.kitchen || []).includes(item)} onCheckedChange={() => updateAmenities('kitchen', item)} />
              <label htmlFor={`kitchen-${item}`} className="text-sm cursor-pointer">{item}</label>
            </div>
          ))}
        </div>
      </div>
      <div className="space-y-3">
        <h3 className="text-md font-semibold">ูุฑุงูู ุฎุงุฑุฌูุฉ</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          {outdoorAmenities.map(item => (
            <div key={item} className="flex items-center space-x-2 space-x-reverse">
              <Checkbox id={`outdoor-${item}`} checked={(data.features.amenities.outdoor || []).includes(item)} onCheckedChange={() => updateAmenities('outdoor', item)} />
              <label htmlFor={`outdoor-${item}`} className="text-sm cursor-pointer">{item}</label>
            </div>
          ))}
        </div>
      </div>
      <div className="space-y-3">
        <h3 className="text-md font-semibold">ุฎุฏูุงุช ุนุงูุฉ</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          {facilities.map(item => (
            <div key={item} className="flex items-center space-x-2 space-x-reverse">
              <Checkbox id={`facility-${item}`} checked={(data.features.facilities || []).includes(item)} onCheckedChange={() => toggleFeature(facilities, item, 'facilities')} />
              <label htmlFor={`facility-${item}`} className="text-sm cursor-pointer">{item}</label>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

function StepEnvironment({ data, setData }) {
  const toggleFeature = (list, item, key) => {
    const current = data.environment[key] || [];
    const exists = current.includes(item);
    const newItems = exists ? current.filter(i => i !== item) : [...current, item];
    setData(d => ({ ...d, environment: { ...d.environment, [key]: newItems } }));
  };
  const updateSeclusion = value => setData(d => ({ ...d, environment: { ...d.environment, seclusion: value } }));
  return (
    <div className="space-y-6">
      <div className="space-y-3">
        <h3 className="text-md font-semibold">ููุน ุงูุชุถุงุฑูุณ ุงููุญูุทู ุจุงููุฎูู</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          {terrainOptions.map(item => (
            <div key={item} className="flex items-center space-x-2 space-x-reverse">
              <Checkbox id={`terrain-${item}`} checked={(data.environment.terrain || []).includes(item)} onCheckedChange={() => toggleFeature(terrainOptions, item, 'terrain')} />
              <label htmlFor={`terrain-${item}`} className="text-sm cursor-pointer">{item}</label>
            </div>
          ))}
        </div>
      </div>
      <div className="space-y-3">
        <label className="text-md font-semibold">ูุณุชูู ุงูุนุฒูุฉ</label>
        <Select value={data.environment.seclusion || ""} onValueChange={updateSeclusion}>
          <SelectTrigger dir="rtl"><SelectValue dir="rtl" placeholder="ุงุฎุชุฑ ูุณุชูู ุงูุนุฒูุฉ" /></SelectTrigger>
          <SelectContent dir="rtl">
            {seclusionOptions.map(option => <SelectItem key={option} value={option}>{option}</SelectItem>)}
          </SelectContent>
        </Select>
      </div>
      <div className="space-y-3">
        <h3 className="text-md font-semibold">ุฃูุดุทุฉ ูุชููุฑุฉ</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          {activities.map(item => (
            <div key={item} className="flex items-center space-x-2 space-x-reverse">
              <Checkbox id={`activity-${item}`} checked={(data.environment.activities || []).includes(item)} onCheckedChange={() => toggleFeature(activities, item, 'activities')} />
              <label htmlFor={`activity-${item}`} className="text-sm cursor-pointer">{item}</label>
            </div>
          ))}
        </div>
      </div>
      <div className="space-y-3">
        <h3 className="text-md font-semibold">ูุณุงุญุงุช ูุดุชุฑูุฉ</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          {sharedSpaces.map(item => (
            <div key={item} className="flex items-center space-x-2 space-x-reverse">
              <Checkbox id={`shared-${item}`} checked={(data.environment.sharedSpaces || []).includes(item)} onCheckedChange={() => toggleFeature(sharedSpaces, item, 'sharedSpaces')} />
              <label htmlFor={`shared-${item}`} className="text-sm cursor-pointer">{item}</label>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

function StepRulesPricing({ data, setData }) {
  const updateRules = patch => setData(d => ({ ...d, rules: { ...d.rules, ...patch } }));
  const updatePricing = patch => setData(d => ({ ...d, pricing: { ...d.pricing, ...patch } }));

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        <h3 className="text-md font-semibold">ุฃููุงุช ุงูุฏุฎูู ูุงูุฎุฑูุฌ</h3>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="text-sm font-medium"> ุชุณุฌูู ุงูุฏุฎูู</label>
            <Input type="time" value={data.rules.checkInFrom} onChange={e => updateRules({ checkInFrom: e.target.value })} />
          </div>
          <div>
            <label className="text-sm font-medium">ุชุณุฌูู ุงูุฎุฑูุฌ</label>
            <Input type="time" value={data.rules.checkOut} onChange={e => updateRules({ checkOut: e.target.value })} />
          </div>
          <div>
            <label className="text-sm font-medium">ุงูุญุฏ ุงูุฃุฏูู ููุนูุฑ (ุณูุฉ)</label>
            <Input type="number" min={0} value={data.rules.minAge} onChange={e => updateRules({ minAge: Math.max(0, Number(e.target.value) || 0) })} />
          </div>
        </div>
      </div>
      <div className="space-y-4">
        <h3 className="text-md font-semibold">ุงูุชุณุนูุฑ (ุฏููุงุฑ ุฃูุฑููู) *</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-3 p-4 border rounded-lg">
            <h4 className="font-medium text-center">ุงูุฃูุงู ุงูุนุงุฏูุฉ</h4>
            <div>
              <label className="text-sm">ูุน ุงููุจูุช</label>
              <Input type="number" min={0} step="0.5" value={data.pricing.weekday_with_accommodation} onChange={e => updatePricing({ weekday_with_accommodation: Math.max(0, Number(e.target.value) || 0) })} />
            </div>
            <div>
              <label className="text-sm">ุจุฏูู ุงููุจูุช</label>
              <Input type="number" min={0} step="0.5" value={data.pricing.weekday_without_accommodation} onChange={e => updatePricing({ weekday_without_accommodation: Math.max(0, Number(e.target.value) || 0) })} />
            </div>
          </div>
          <div className="space-y-3 p-4 border rounded-lg">
            <h4 className="font-medium text-center">ุฃูุงู ุงูุนุทู ูุงูููุงุณุจุงุช</h4>
            <div>
              <label className="text-sm">ูุน ุงููุจูุช</label>
              <Input type="number" min={0} step="0.5" value={data.pricing.holiday_with_accommodation} onChange={e => updatePricing({ holiday_with_accommodation: Math.max(0, Number(e.target.value) || 0) })} />
            </div>
            <div>
              <label className="text-sm">ุจุฏูู ุงููุจูุช</label>
              <Input type="number" min={0} step="0.5" value={data.pricing.holiday_without_accommodation} onChange={e => updatePricing({ holiday_without_accommodation: Math.max(0, Number(e.target.value) || 0) })} />
            </div>
          </div>
        </div>
        <div className="text-xs text-muted-foreground">ุฃุฏุฎู ุงูููู ุงูููุงุณุจุฉุ ูููููู ุชุฑู ุบูุฑ ุงููุชุงุญ ุจูููุฉ 0.</div>
      </div>
      <div className="space-y-2">
        <label className="text-sm font-medium">ููุงุนุฏ ูุดุฑูุท ุฅุถุงููุฉ (ุงุฎุชูุงุฑู)</label>
        <Textarea rows={3} value={data.rules.additionalRules || ""} onChange={e => setData(d => ({ ...d, rules: { ...d.rules, additionalRules: e.target.value } }))} placeholder="ูุซุงู: ูุฏูุก ุจุนุฏ 10 ูุ ููููุน ุงูุชุฏุฎูู..." />
      </div>
    </div>
  );
}

function StepImages({ data, setData }) {
  return (
    <div className="space-y-4">
      <div>
        <label className="text-sm font-medium">ุตูุฑ ุงููุฎูู *</label>
        <Input type="file" multiple accept="image/*" onChange={e => setData(d => ({ ...d, files: Array.from(e.target.files || []) }))} />
        <div className="text-xs text-muted-foreground mt-2">ุงุฑูุน ุนุฏุฉ ุตูุฑ ุนุงููุฉ ุงูุฌูุฏุฉ. ุงูุตูุฑุฉ ุงูุฃููู ุณุชููู ุงูุฑุฆูุณูุฉ.</div>
      </div>
      {data.files.length > 0 && (<div className="text-sm text-green-600">ุชู ุงุฎุชูุงุฑ {data.files.length} ุตูุฑุฉ</div>)}
    </div>
  );
}

function StepReview({ data }) {
  const totalBeds = Object.values(data.capacity.beds || {}).reduce((s, v) => s + Number(v || 0), 0);

  return (
    <div className="space-y-6 text-sm">
      <div className="flex items-center gap-2 text-emerald-600"><CheckCircle2 className="h-5 w-5" /> ูุฑุงุฌุนุฉ ุงูุจูุงูุงุช ูุจู ุงูุฅุฑุณุงู</div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <h4 className="font-semibold">ุฅูุดุงุก ูุฎูู ุฌุฏูุฏ</h4>
          <div><strong>ุงูุฏููุฉ:</strong> {data.profile.country || "-"}</div>
          <div><strong>ุงููุซููุฉ:</strong> {data.profile.docType || "-"} / {data.profile.docNumber || "-"} / {data.profile.docCountry || "-"}</div>
          <div><strong>ุงูุนููุฉ:</strong> USD โ ุงูุฏููุงุฑ ุงูุฃูุฑููู</div>
          <div><strong>ุงูุณุจุจ:</strong> {data.profile.why || "-"}</div>
        </div>
        <div className="space-y-2">
          <h4 className="font-semibold">ุงููุฎูู</h4>
          <div><strong>ุงูุงุณู:</strong> {data.basics.name || "-"}</div>
          <div><strong>ุงูููุน:</strong> {data.basics.propertyType || "-"}</div>
          <div><strong>ุงููููุน:</strong> {[data.location.city, data.location.state, data.location.country].filter(Boolean).join(", ") || "-"}</div>
          <div><strong>ุงูุถููู:</strong> {data.capacity.maxGuests || 0}</div>
          <div><strong>ุบุฑู ุงูููู:</strong> {data.capacity.bedrooms || 0}</div>
          <div><strong>ุฅุฌูุงูู ุงูุฃุณุฑูุฉ:</strong> {totalBeds}</div>
        </div>
        <div className="space-y-2">
          <h4 className="font-semibold">ุงูุชุณุนูุฑ</h4>
          <div><strong>ุนุงุฏู ูุน ูุจูุช:</strong> {data.pricing.weekday_with_accommodation || 0}</div>
          <div><strong>ุนุงุฏู ุจุฏูู ูุจูุช:</strong> {data.pricing.weekday_without_accommodation || 0}</div>
          <div><strong>ุนุทูุฉ ูุน ูุจูุช:</strong> {data.pricing.holiday_with_accommodation || 0}</div>
          <div><strong>ุนุทูุฉ ุจุฏูู ูุจูุช:</strong> {data.pricing.holiday_without_accommodation || 0}</div>
        </div>
        <div className="space-y-2">
          <h4 className="font-semibold">ุงูุฎุฏูุงุช ูุงูุจูุฆุฉ</h4>
          <div><strong>ุฃุณุงุณูุฉ:</strong> {(data.features.amenities.basic || []).length} ุนูุตุฑ</div>
          <div><strong>ุญูุงู:</strong> {(data.features.amenities.bath || []).length} ุนูุตุฑ</div>
          <div><strong>ูุทุจุฎ:</strong> {(data.features.amenities.kitchen || []).length} ุนูุตุฑ</div>
          <div><strong>ุฎุงุฑุฌูุฉ:</strong> {(data.features.amenities.outdoor || []).length} ุนูุตุฑ</div>
          <div><strong>ุชุถุงุฑูุณ:</strong> {(data.environment.terrain || []).length} ููุน</div>
          <div><strong>ุฃูุดุทุฉ:</strong> {(data.environment.activities || []).length} ูุดุงุท</div>
          <div><strong>ุนุฒูุฉ:</strong> {data.environment.seclusion || "-"}</div>
          <div><strong>ุตูุฑ:</strong> {data.files.length}</div>
        </div>
      </div>
    </div>
  );
}

export default function JoinUs() {
  const { toast } = useToast();
  const [privacyOpen, setPrivacyOpen] = useState(false);
  const [termsOpen, setTermsOpen] = useState(false);

  const [form, setForm] = useState({
    profile: {
      country: "",
      docType: "",
      docNumber: "",
      docCountry: "",
      why: "",
      agreeTerms: true,
    },
    basics: { name: "", propertyType: "", website: "" },
    description: { summary: "", guestServices: "" },
    location: { country: "", state: "", city: "", zip: "", street: "" },
    capacity: { maxGuests: 1, bedrooms: 0, beds: bedTypes.reduce((acc, b) => ({ ...acc, [b.key]: 0 }), {}) },
    features: { amenities: { basic: [], bath: [], kitchen: [], outdoor: [] }, facilities: [] },
    environment: { terrain: [], seclusion: "", activities: [], sharedSpaces: [] },
    rules: { checkInFrom: "14:00", checkInTo: "22:00", checkOut: "12:00", additionalRules: "", minAge: 18 },
    pricing: {
      weekday_with_accommodation: 0,
      weekday_without_accommodation: 0,
      holiday_with_accommodation: 0,
      holiday_without_accommodation: 0,
    },
    files: [],
  });

  const steps = useMemo(() => ([
    { key: "profile", title: "ุฅูุดุงุก ูุฎูู ุฌุฏูุฏ", comp: <StepProfile data={form} setData={setForm} onOpenPrivacy={() => setPrivacyOpen(true)} onOpenTerms={() => setTermsOpen(true)} /> },
    { key: "basics", title: "ุงูุฃุณุงุณูุงุช", comp: <StepBasics data={form} setData={setForm} /> },
    { key: "location", title: "ุงููููุน", comp: <StepLocation data={form} setData={setForm} /> },
    { key: "capacity", title: "ุงูุณุนุฉ", comp: <StepCapacity data={form} setData={setForm} /> },
    { key: "features", title: "ุงููุฑุงูู ูุงูุฎุฏูุงุช", comp: <StepFeatures data={form} setData={setForm} /> },
    { key: "environment", title: "ุงูุจูุฆุฉ ูุงูุฃูุดุทุฉ", comp: <StepEnvironment data={form} setData={setForm} /> },
    { key: "rulesPricing", title: "ุงูููุงุนุฏ ูุงูุชุณุนูุฑ", comp: <StepRulesPricing data={form} setData={setForm} /> },
    { key: "images", title: "ุงูุตูุฑ", comp: <StepImages data={form} setData={setForm} /> },
    { key: "review", title: "ูุฑุงุฌุนุฉ", comp: <StepReview data={form} /> },
  ]), [form]);

  const [stepIndex, setStepIndex] = useState(0);
  const isFirst = stepIndex === 0;
  const isLast = stepIndex === steps.length - 1;

  const validateStep = () => {
    const s = steps[stepIndex].key;
    if (s === "profile") {
      const p = form.profile;
      if (!p.docType) { toast({ title: "ููุน ุงููุซููุฉ ูุทููุจ", variant: "destructive" }); return false; }
      if (!p.docNumber?.trim()) { toast({ title: "ุฑูู ุงููุซููุฉ ูุทููุจ", variant: "destructive" }); return false; }
      if (!p.docCountry) { toast({ title: "ุจูุฏ ุงูุฅุตุฏุงุฑ ูุทููุจ", variant: "destructive" }); return false; }
      if (!p.agreeTerms) { toast({ title: "ูุฌุจ ุงูููุงููุฉ ุนูู ุงูุดุฑูุท", variant: "destructive" }); return false; }
    }
    if (s === "basics") {
      if (!form.basics.name.trim()) { toast({ title: "ุงุณู ุงููุฎูู ูุทููุจ", variant: "destructive" }); return false; }
      if (!form.basics.propertyType) { toast({ title: "ููุน ุงูููููุฉ ูุทููุจ", variant: "destructive" }); return false; }
      if (!form.description.summary.trim()) { toast({ title: "ูุตู ุงููุฎูู ูุทููุจ", variant: "destructive" }); return false; }
    }
    if (s === "location") {
      if (!form.location.country.trim()) { toast({ title: "ุงูุฏููุฉ ูุทููุจุฉ", variant: "destructive" }); return false; }
      if (!form.location.state.trim()) { toast({ title: "ุงููุญุงูุธุฉ/ุงูููุงูุฉ ูุทููุจุฉ", variant: "destructive" }); return false; }
      if (!form.location.city.trim()) { toast({ title: "ุงููุฏููุฉ ูุทููุจุฉ", variant: "destructive" }); return false; }
      if (!form.location.street.trim()) { toast({ title: "ุงูุนููุงู ุงูุชูุตููู ูุทููุจ", variant: "destructive" }); return false; }
    }
    if (s === "capacity") {
      const totalBeds = Object.values(form.capacity.beds || {}).reduce((s, v) => s + Number(v || 0), 0);
      if (form.capacity.maxGuests < 1) { toast({ title: "ุฃูุตู ุนุฏุฏ ุถููู ูุง ููู ุนู 1", variant: "destructive" }); return false; }
      if (totalBeds < 1) { toast({ title: "ุฃุถู ุณุฑูุฑุงู ูุงุญุฏุงู ุนูู ุงูุฃูู", variant: "destructive" }); return false; }
    }
    if (s === "rulesPricing") {
      if ((form.rules.minAge ?? 0) < 0) { toast({ title: "ุงูุญุฏ ุงูุฃุฏูู ููุนูุฑ ุบูุฑ ุตุงูุญ", variant: "destructive" }); return false; }
      const p = form.pricing;
      const prices = [p.weekday_with_accommodation, p.weekday_without_accommodation, p.holiday_with_accommodation, p.holiday_without_accommodation];
      const hasInvalid = prices.some(x => !(Number.isFinite(x) && x >= 0));
      if (hasInvalid) { toast({ title: "ุชุญูู ูู ุงูุฃุณุนุงุฑ", description: "ูุฌุจ ุฅุฏุฎุงู ููู ุตุญูุญุฉ ููุฃุณุนุงุฑ.", variant: "destructive" }); return false; }
      if (prices.every(x => x === 0)) { toast({ title: "ูุฌุจ ุฅุฏุฎุงู ุณุนุฑ ูุงุญุฏ ุนูู ุงูุฃูู", variant: "destructive" }); return false; }
    }
    if (s === "images") {
      if ((form.files?.length || 0) < 5) { toast({ title: "ุงูุตูุฑ ูุทููุจุฉ", description: "ูุฑุฌู ุฑูุน 5 ุตูุฑ ุนูู ุงูุฃูู.", variant: "destructive" }); return false; }
    }
    return true;
  };

  const next = () => {
    if (validateStep()) setStepIndex(i => Math.min(i + 1, steps.length - 1));
  };
  const prev = () => setStepIndex(i => Math.max(i - 1, 0));

  const submit = async () => {
    try {
      const payload = {
        profile: {
          country: form.profile.country || null,
          document: {
            type: form.profile.docType,
            number: form.profile.docNumber?.trim(),
            countryOfIssue: form.profile.docCountry
          },
          reason: form.profile.why || null,
          currency: "USD",
        },
        basics: {
          name: form.basics.name.trim(),
          propertyType: form.basics.propertyType || null,
          website: form.basics.website || null
        },
        description: {
          summary: form.description.summary || null,
          guestServices: form.description.guestServices || null
        },
        location: {
          country: form.location.country || null,
          state: form.location.state || null,
          city: form.location.city || null,
          zip: form.location.zip || null,
          street: form.location.street || null
        },
        capacity: {
          maxGuests: form.capacity.maxGuests,
          bedrooms: form.capacity.bedrooms,
          beds: form.capacity.beds
        },
        facilities: form.features.facilities,
        amenities: form.features.amenities,
        sharedSpaces: form.environment.sharedSpaces,
        seclusion: form.environment.seclusion ? [form.environment.seclusion] : [],
        activities: { options: form.environment.activities },
        terrain: form.environment.terrain,
        rules: {
          checkInFrom: form.rules.checkInFrom,
          checkInTo: form.rules.checkInTo,
          checkOut: form.rules.checkOut,
          minAge: form.rules.minAge,
          additionalRules: form.rules.additionalRules || null
        },
        booking: {},
        pricing: {
          weekday: {
            withAccommodation: form.pricing.weekday_with_accommodation,
            withoutAccommodation: form.pricing.weekday_without_accommodation
          },
          holiday: {
            withAccommodation: form.pricing.holiday_with_accommodation,
            withoutAccommodation: form.pricing.holiday_without_accommodation
          }
        }
      };

      const fd = new FormData();
      fd.append("joinDataJson", JSON.stringify(payload));
      for (const f of form.files) fd.append("images", f);

      await api.post("/api/camp-requests", fd, { headers: { "Content-Type": "multipart/form-data" } });

      toast({ title: "ุชู ุฅุฑุณุงู ุงูุทูุจ ุจูุฌุงุญ!", description: "ุณูุชู ุงูุชูุงุตู ูุนู ุฎูุงู 3-5 ุฃูุงู ุนูู." });

      setStepIndex(0);
    } catch (err) {
      const message = err?.response?.data?.message || "ุชุนุฐุฑ ุฅุฑุณุงู ุงูุทูุจ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.";
      toast({ title: "ุฎุทุฃ", description: message, variant: "destructive" });
    }
  };

  return (
    <div dir="rtl">
      <section className="border-b bg-muted/40">
        <div className="container py-8">
          <h1 className="text-2xl md:text-3xl font-bold">ุงูุถู ูููุฏู ูุฎูู</h1>
          <p className="text-muted-foreground mt-2">ุงุจุฏุฃ ุจุฅูุดุงุก ูููู ุงูุดุฎุตู ุซู ุฃููู ุจูุงูุงุช ุงููุฎูู ุฎุทูุฉ ุจุฎุทูุฉ.</p>
        </div>
      </section>
      <section className="py-8">
        <div className="container max-w-4xl">
          <div className="mb-8">
            <div className="flex items-center justify-center mb-4">
              <span className="text-sm font-medium">ุงูุฎุทูุฉ {stepIndex + 1} ูู {steps.length}</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-primary h-2 rounded-full transition-all duration-300"
                style={{ width: `${((stepIndex + 1) / steps.length) * 100}%` }}
              >
              </div>
            </div>
          </div>
          <div className="flex flex-wrap items-center justify-center gap-2 mb-6 text-sm">
            {steps.map((s, idx) => (
              <div key={s.key} className={`px-3 py-1 rounded-full border text-center ${
                idx === stepIndex ? "bg-primary text-primary-foreground" :
                idx < stepIndex ? "bg-green-100 text-green-700 border-green-300" : "bg-background"
              }`}>
                {s.title}
              </div>
            ))}
          </div>
          <div className="rounded-lg border bg-card p-6">
            <h2 className="text-xl font-semibold mb-4">{steps[stepIndex].title}</h2>
            {steps[stepIndex].comp}
          </div>
          <div className="mt-6 flex items-center justify-between">
            <Button variant="outline" onClick={() => setStepIndex(i => Math.max(i - 1, 0))} disabled={isFirst} className="inline-flex items-center gap-2">
              <ChevronRight className="h-4 w-4 rotate-180" /> ุงูุณุงุจู
            </Button>
            {!isLast ? (
              <Button onClick={() => { if(validateStep()) setStepIndex(i => Math.min(i + 1, steps.length - 1)); }} className="inline-flex items-center gap-2">
                ุงูุชุงูู <ChevronLeft className="h-4 w-4" />
              </Button>
            ) : (
              <Button onClick={submit} className="inline-flex items-center gap-2 bg-green-600 hover:bg-green-700">
                ุฅุฑุณุงู ุงูุทูุจ <CheckCircle2 className="h-4 w-4" />
              </Button>
            )}
          </div>
        </div>
      </section>
      <Dialog open={privacyOpen} onOpenChange={setPrivacyOpen}>
        <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto" dir="rtl">
          <DialogHeader><DialogTitle>ุณูุงุณุฉ ุงูุฎุตูุตูุฉ โ ููุตุฉ ูุงูุจูู (Camply)</DialogTitle></DialogHeader>
          <div className="space-y-4 text-sm leading-7">
            {/* ูุต ุณูุงุณุฉ ุงูุฎุตูุตูุฉ ูุงููุงู */}
          </div>
        </DialogContent>
      </Dialog>
      <Dialog open={termsOpen} onOpenChange={setTermsOpen}>
        <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto" dir="rtl">
          <DialogHeader><DialogTitle>ุงูุดุฑูุท ูุงูุฃุญูุงู โ ููุตุฉ ูุงูุจูู (Camply)</DialogTitle></DialogHeader>
          <div className="space-y-4 text-sm leading-7">
            {/* ูุต ุงูุดุฑูุท ูุงูุฃุญูุงู ูุงููุงู */}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
